{"paragraphs":[{"text":"%pyspark\nimport random","user":"anonymous","dateUpdated":"2024-03-22T21:21:51+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1711020324881_1337630080","id":"20240321-182524_1606841479","dateCreated":"2024-03-21T18:25:24+0700","dateStarted":"2024-03-22T21:21:51+0700","dateFinished":"2024-03-22T21:21:51+0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:441"},{"text":"%pyspark\n\nclass NQueens:\n    def __init__(self, n):\n        self.n = n\n        self.solution = list(range(n))\n      \n\n    def solve(self, max_steps=1000):\n        for _ in range(max_steps):\n            conflicts = self.find_conflicts()\n            if sum(conflicts) == 0:\n                return self.solution\n            col = self.select_conflicted_column(conflicts)\n            min_hits = min(self.hits(col, row) for row in range(self.n))\n            min_hit_positions = [row for row in range(self.n) if self.hits(col, row) == min_hits]\n            self.solution[col] = random.choice(min_hit_positions)\n        return None\n\n    def find_conflicts(self):\n        conflict_counts = []\n        for col in range(self.n):\n            col_conflicts = self.hits(col, self.solution[col])\n            conflict_counts.append(col_conflicts)\n        return conflict_counts\n    \n    def hits(self, col, row):\n        num_conflicts = 0\n        for c in range(self.n):\n            if c != col:\n                current_row = self.solution[c]\n              # Kiểm tra xem có xung đột không và tăng biến đếm nếu có\n                if current_row == row or abs(c - col) == abs(current_row - row):\n                    num_conflicts += 1\n        return num_conflicts\n    \n    def select_conflicted_column(self, conflicts):\n        conflicted_columns = []\n        for col in range(len(conflicts)):\n            if conflicts[col] > 0:\n                conflicted_columns.append(col)\n        return random.choice(conflicted_columns)\n\n    def show_solution_list(self):\n        return self.solution\n        \n    def show_solution(self):\n        print(' _' * self.n)\n        for row in range(self.n):\n            print('|', end='')\n            line = ['Q' if self.solution[col] == self.n - 1 - row \\\n                                else '_' for col in range(self.n)]\n            print('|'.join(line))\n","user":"anonymous","dateUpdated":"2024-03-26T08:04:42+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1711020413630_-1853227396","id":"20240321-182653_340503150","dateCreated":"2024-03-21T18:26:53+0700","dateStarted":"2024-03-22T21:22:07+0700","dateFinished":"2024-03-22T21:22:07+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:442"},{"text":"%pyspark\n\nn = 12  # board size\nqueens = NQueens(n)\nsolution = queens.solve()\nif solution:\n    print(\"Solution found:\")\n    queens.show_solution()\nelse:\n    print(\"No solution found\")\n","user":"anonymous","dateUpdated":"2024-03-22T21:23:59+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Solution found:\n _ _ _ _ _ _ _ _ _ _ _ _\n|_|_|_|_|Q|_|_|_|_|_|_|_\n|_|_|_|_|_|_|_|_|_|Q|_|_\n|Q|_|_|_|_|_|_|_|_|_|_|_\n|_|_|_|_|_|Q|_|_|_|_|_|_\n|_|_|_|_|_|_|_|_|_|_|Q|_\n|_|_|Q|_|_|_|_|_|_|_|_|_\n|_|_|_|_|_|_|_|_|_|_|_|Q\n|_|_|_|_|_|_|Q|_|_|_|_|_\n|_|_|_|_|_|_|_|_|Q|_|_|_\n|_|_|_|Q|_|_|_|_|_|_|_|_\n|_|Q|_|_|_|_|_|_|_|_|_|_\n|_|_|_|_|_|_|_|Q|_|_|_|_\n"}]},"apps":[],"jobName":"paragraph_1711020443376_-1578717678","id":"20240321-182723_518926644","dateCreated":"2024-03-21T18:27:23+0700","dateStarted":"2024-03-22T21:23:59+0700","dateFinished":"2024-03-22T21:24:00+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:443"},{"text":"","user":"anonymous","dateUpdated":"2024-03-21T18:26:53+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1711020369376_2065051504","id":"20240321-182609_1002565263","dateCreated":"2024-03-21T18:26:09+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:444"}],"name":"GK_Node01","id":"2JV3GX46R","noteParams":{},"noteForms":{},"angularObjects":{"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}